<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Ciaran McNulty]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2015-07-05T22:25:47+01:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Testing Constructors with PhpSpec 2.3]]></title>
            <link href="/testing-constructors-with-phpspec-2"/>
            <updated>2015-07-06T00:00:00+01:00</updated>
            <id>/testing-constructors-with-phpspec-2</id>
            <content type="html"><![CDATA[<p>At the weekend I tagged the first (hopefully only) beta release of PhpSpec 2.3.0. You can see the <a href="https://github.com/phpspec/phpspec/releases/tag/2.3.0-beta">details of the release here</a></p>

<p>Several of the features relate to constructors, so I thought it was worth going through the differences to how you deal with
constructors when specifying classes.</p>

<h1>Describing construction in 2.2.x</h1>

<p>Since the 2.0 release you have always been able to describe simple constructors:</p>

<pre><code class="php">$this-&gt;beConstructedWith(100, 'param');
</code></pre>

<p>This works fine when describing <code>__construct</code> but a common pattern nowadays is to use Named Constructors. We did not have
a sensible way to describe them until <a href="http://github.com/thecrimpmaster">Jason</a> added a neat syntax for doing this version 2.2.0:</p>

<pre><code class="php">$this-&gt;beConstructedThrough('named', ['Ciaran']);
</code></pre>

<p>This describes a class that has somethng like the following implementation of a static class:</p>

<pre><code class="php">public static function named($name)
{
    $user = new User();
    $user-&gt;name = $name;

    return $user;
}
</code></pre>

<p>Which allows the more readable:</p>

<pre><code class="php">$user = User::named('Ciaran');
</code></pre>

<p>This opened up a lot of possibilities but there were a few issues:</p>

<ol>
<li>The public constructor still existed (Jason's original PR actually handled this but for some reason I got him to remove it).</li>
<li>From observing people using the tool, it became apparent that using an array of parameters caused confusion.</li>
<li>There was no sensible way of testing named constructors throwing Exceptions (e.g. when guarding invariants)</li>
</ol>

<h1>Describing constructors in 2.3.0</h1>

<p>You can now describe named constructors using a shortcut syntax:</p>

<pre><code class="php">$this-&gt;beConstructedNamed('Ciaran');
</code></pre>

<p>This is the equivalent of the case above, without the need to pass the arguments as an array. In short anything matching
<code>beConstructed*()</code> or <code>beConstructedThrough*()</code> are converted to an equivalent <code>beConstructedThrough()</code> call.</p>

<p>The aim of this is to make the specs more readable - the cost is that there is now more than one way of specifying these things.
Time will tell whether this works or not.</p>

<p>Another new addition is that when generating a named constructor, you will be asked:</p>

<pre><code>Do you want me to make the constructor of CLASS private for you? [Y/n]
</code></pre>

<p>When answering yes a private <code>__construct</code> is generated, meaning the named constructor must be used to create instances of the obectk.</p>

<h1>Describing constructor failure in 2.2.x</h1>

<p>Until now, it's only been possible to test a constructor that throws an exception by explicitly invoking it:</p>

<pre><code class="php">$this-&gt;shouldThrow('InvalidArgumentException')-&gt;during('__construct', ['']);
</code></pre>

<p>This suffers the same problems that <code>beConstructedThrough</code> had - mostly people forgetting to put single arguments inside
an array.</p>

<p>It was vaguely dissatisfying that you tested the constructor by invoking it, and potentially had to repeat the arguments
again, even if you'd called <code>beConstructedWith</code>. Worse, there was no sensible way to specify a static constructor
throwing an argument.</p>

<h1>Describing constructor failure in 2.3.0</h1>

<p>Thanks to <a href="https://github.com/acasademont">Albert</a> we have a new syntax specifically for describing this sort of exception
that does not care what the construction method used was:</p>

<pre><code class="php">$this-&gt;beConstructedWith(-100);
$this-&gt;shouldThrow('InvalidArgumentException')-&gt;duringInstantiation();
</code></pre>

<p>or</p>

<pre><code class="php">$this-&gt;beConstructedNamed('InvalidName');
$this-&gt;shouldThrow('InvalidArgumentException')-&gt;duringInstantiation();
</code></pre>

<p>For me this is much clearer, and really helps with the clarity of the specs.</p>

<h1>One last thing...</h1>

<p>Something that's bugged me for years is that when PhpSpec generates a constructor method it does so at the end of the
class. Thanks to <a href="https://github.com/shanethehat">Shane</a> it's now placed up front in the class!</p>

<p>This is the sort of small change that takes a big effort to implement, so thanks Shane and all the other contributors who've
made this release great.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Back to Blogging]]></title>
            <link href="/back-to-blogging"/>
            <updated>2015-07-05T00:00:00+01:00</updated>
            <id>/back-to-blogging</id>
            <content type="html"><![CDATA[<p>Wow, it's been a while! I honestly can't believe it's been nearly 3.5 years since I last wrote a blog post. A few things
have happened in that time:</p>

<ul>
<li>I left <a href="http://themill.com">The Mill / Beam</a> and moved to an awesome job at <a href="http://inviqa.com">Inviqa</a>, where I'm now mostly doing training and coaching</li>
<li>I got involved with, and subsequently took over maintainence of <a href="http://phpspec.net">PhpSpec</a>, a tool I thought was really cool</li>
<li>I started speaking at meetups and conferences (I need to find somewhere on this site to store links to videos)</li>
<li>I got married (gearing up for that was the initial reason I didn't have time to write much)</li>
</ul>

<p>In short, my professional life has changed hugely. I guess I'm now back in a place where I feel I can write longer-form stuff
for a blog.</p>

<p>I keep promising work that I'll write articles for either the Inviqa or Sensio Labs UK sites, so will link out to there when
appropriate, but I wanted to have a place I could dash stuff off without editors being involved.</p>

<p>So, I spent this morning switching the site over to the very cool <a href="http://sculpin.io">Sculpin</a>, and started a few draft posts that I'll be pushing
out in the future. At some point I'll rejig the site's layout so it's a lot easier to find older content.</p>

<p>My aim is to produce 1 blog per month. Will I stick to it? Time will tell...</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Faster failing Unit Tests]]></title>
            <link href="/faster-failing-unit-tests"/>
            <updated>2012-02-08T00:00:00+00:00</updated>
            <id>/faster-failing-unit-tests</id>
            <content type="html"><![CDATA[<p>One of the things about unit tests is that if they're going to fail, it's best if they fail quickly.

<p>(This is also a key element of Scrum and other Agile approaches - if you're going to fail, do it as early as possible).

<p>I was listening to <a href="http://www.se-radio.net/2010/09/episode-167-the-history-of-junit-and-the-future-of-testing-with-kent-beck/">this old episode of Software Engineering Radio</a> and in it Kent Beck made the following observations:

<ol>
<li>Ideally you want to run the tests most likely to fail first, so that you get faster feedback
<li>Statistically the most likely tests to fail are the ones that failed recently (i.e. if a test hasn't failed for a while it's less likely to fail next time).
</ol>

<p>This really clicked with me, especially for things like CI, so I knocked up the following hacky script to run my phpunit tests through:

<p><code><pre>
&lt;?php

$run_full = true;

if (file_exists('last_run_report.xml')) {
    
    $failures = array();
    $xml = simplexml_load_file('last_run_report.xml');
    
    if ($res = $xml-&gt;xpath('//error/../@file')) {
        foreach ($res as $file) {
            $failures[] = (string)$file;
        }
    }

    if ($failures) {
        echo 'PREVIOUSLY FAILING TESTS', PHP_EOL;
        echo '------------------------', PHP_EOL;
        passthru('phpunit '.join(' ', $failures), $exit);
        
        if ($exit &gt; 0) { 
            $run_full = false; 
        }
        else {
            echo PHP_EOL;
            echo 'FULL TEST SUITE', PHP_EOL;
            echo '---------------', PHP_EOL;
        }
    }
}

if($run_full){
    passthru('phpunit --log-junit last_run_report.xml');
}
</pre></code></p>

<p>When I use this to run my test suite instead of straight phpunit, it results in a local file called last_run_report.xml being generated. Next time I run the report, if there were any errors, the report is parsed and the failing tests are executed first.

<p>This is <em>really primitive</em> but is already saving me a little time. The next step would be to get a DB involved and maybe log the last few executions of the current suite, to get some stats on how unstable tests have been over the last few executions and prioritise them that way.

<p>I'm sure there's a bunch of other analysis you could do to work out statistically which tests are likely to fail - you could even do some sort of static code analysis and work out which tests have ben potentially impacted since the last test run.

<p>I'll be running this little script locally for now, but with an eye to including it in our CI environment once I've a bit more confidence that it's a valid approach.]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Unix tips: handling script output]]></title>
            <link href="/unix-tips-handing-script-output"/>
            <updated>2012-01-06T00:00:00+00:00</updated>
            <id>/unix-tips-handing-script-output</id>
            <content type="html"><![CDATA[<p>Wow I've not blogged in ages! Here's a couple of quickies that I seem to rediscover every 6 months and promptly forget - hopefully writing them here will make them stick in my head.

<h4>Logging output to disk</h4>

<p>Obviously to log the output of some process to disk you'd normally use <tt>&gt;</tt> or <tt>&gt;&gt;</tt>. However, sometimes you want to also use the output for some other process.

<p>In instances like this you'd use <tt>tee</tt>:</p>

<p><code><pre>
php my-script.php | tee -a /var/log/my-script.log | other-script
</pre></code>

<p>The output of my my-script.php will be both written to my my-script.log, and piped to other-script for further processing (the -a flag means the output is appended to the log rather than it being overwritten).

<h4>Emailing output when something happens</h4>

<p>The <tt>mail</tt> command provides a simple way to mail the output of a script:

<p><code><pre>
php myscript.php | mail -s "A subject line" address@example.com
</pre></code>

<p>However this gets annoying when your script runs every 5 minutes, so more recent implementations of <tt>mail</tt> have a <tt>-E</tt> flag that only sends the mail if the output wasn't empty:

<p><code><pre>
php myscript.php 2&amp;&gt;1 | mail -E -s "A subject line" address@example.com
</pre></code>

<p>In this example the mail will only be sent if myscript.php output something (or an error, the 2&amp;&gt;1 redirects its error output to its standard output).

<p>Unfortunately commenting is currently disabled, so hit me on twitter @CiaranMcNulty if you have any other tips for what to do with output and I'll maybe write a follow-up article.


]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Disabling comments on this blog]]></title>
            <link href="/disabling-comments-on-this-blog"/>
            <updated>2011-10-09T00:00:00+01:00</updated>
            <id>/disabling-comments-on-this-blog</id>
            <content type="html"><![CDATA[<p>I'm getting really high volumes of comment spam at the moment, and don't really have the time to try and work out how they're evading the reCAPTCHA on the comments form, so I'm just turning it off for now.

<p>I'm also in the process of thinking about what to do with this site, given that I'm not updating too regularly, I tend to stick to one-liners on Twitter a lot more, recently.]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[A great customer service experience from Amazon]]></title>
            <link href="/a-great-customer-service-experience-from-amazon"/>
            <updated>2011-07-05T00:00:00+01:00</updated>
            <id>/a-great-customer-service-experience-from-amazon</id>
            <content type="html"><![CDATA[<p>I got a Kindle around the start of the year, and I guess it's something I could write about separately but I'm fairly sure it's the device I've had that I've got the best entertainment value out of in terms of cost per pound.</p>

<p>If you've seen the ads, you'll come away with the impression that the Kindle can be <a href="http://www.youtube.com/watch?v=uLg817U9URM">shoved in a draw, licked by a dog</a> and generally thrown around the place so that's how I treated mine.</p>

<p>Last week I was talking about the Kindle to some workmates and really praised its rugged form and overall resilience - in retrospect it was asking for trouble. The very next morning I took it out of my bag and saw it looking like this:</p>

<p><a href="http://www.flickr.com/photos/ciaranmcnulty/5904816848/" title="Broken Kindle by CiaranJMcNulty, on Flickr"><img src="http://farm7.static.flickr.com/6011/5904816848_b99d43a2b7.jpg" width="374" height="500" alt="Broken Kindle"></a></p>

<p>My heart sank - what were the odds that Amazon would be able to honour that as a repair? It's fairly clear that it's been knocked around in my bag or something and the screen has failed.</p>

<p>I thought I'd give it a punt anyway and rang Kindle Support. My first experience was not good - the lady on the other end of the line seemed to have trouble understanding me, and took me through a fairly silly 'turn it off and on again' routine. I then got put on hold for a few minutes during which I made <a href="http://twitter.com/#!/CiaranMcNulty/status/88166417123385344">this angry tweet</a>.</p>

<p>However as soon as I got put through to second line support, the whole process was a revelation! Even though I was honest about not having a case and the fact it was clearly damaged from being in my bag, Amazon are sending me a new Kindle immediately which will be here Thursday, after which I have to return the broken one in the box provided.</p>

<p>I felt a bit embarrassed about the tweet so <a href="http://twitter.com/#!/CiaranMcNulty/status/88167696931364865">tried to correct it</a>.</p>


<p>What other hardware companies are this accommodating? Not many I'd warrant so a big thumbs up to Amazon from me. </p>

<p>(Just hope they launch library lending soon in the UK!)</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Use labelled groups in Regular Expressions for clearer code]]></title>
            <link href="/use-labelled-groups-in-regular-expressions-for-clearer-code"/>
            <updated>2011-05-12T00:00:00+01:00</updated>
            <id>/use-labelled-groups-in-regular-expressions-for-clearer-code</id>
            <content type="html"><![CDATA[<p>I keep seeing this sort of pattern in PHP code, when people match on Regular Expressions:

<p><code><pre>
$orderNumber = 'CLK-TEST001-030';
$pattern = '/([a-z]+)-([a-z]+([0-9]+))?-([0-9]+)/i';

if (preg_match($pattern , $orderNumber, $matches)) {
    echo "Prefix was ".$matches[1]." and duration was ".$matches[4];
} 
</pre></code></p>

<p>The problem here is that the numbers 4 and 1 are kind of cryptic. Furthermore if the expression changes in future I'll probably need to go through my code and redo the numbering.

<p>A better alternative is to name the groups inside the expression:

<p><code><pre>
$orderNumber = 'CLK-TEST001-030';
$pattern = '/(?&lt;prefix&gt;[a-z]+)-([a-z]+([0-9]+))?-(?&lt;duration&gt;[0-9]+)/i';

if (preg_match($pattern , $orderNumber, $matches)) {
    echo "Prefix was ".$matches['prefix'].
        " and duration was ".$matches['duration'];
} 
</pre></code></p>

<p>This way if the expression gets changed, I can still use the same named fields in my matches in the subsequent code.

<p>I don't know why this isn't done more often, except perhaps poor documentation means that people just aren't aware of it?


]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Using partial mocks in PHPUnit to test tricky code]]></title>
            <link href="/using-partial-mocks-in-phpunit-to-test-tricky-code "/>
            <updated>2011-04-30T00:00:00+01:00</updated>
            <id>/using-partial-mocks-in-phpunit-to-test-tricky-code </id>
            <content type="html"><![CDATA[<p>At work we've been going through the fairly painful process of adding unit tests to existing code. I'd like to share one technique I've found useful, a way of testing methods that at first glance look like they have too many dependencies to easily get under test.

<p>I'll be giving these examples in PHPUnit but any xUnit framework should be able to do something similar.

<p>Consider a method like the following, which is the sort of thing you might have trouble seeing how to test:

<p><code><pre>
class MyClass
{
    public function getDataAndPublishRemotely()
    {
        $data = DataStore::getUnpublishedData();
        
        $service = new SoapClient($SOME_WSDL);
        $service-&gt;publish(preg_replace('/[^0-9a0z]+/', '', $data));
    }
} 
</pre></code></p>

<p>So this is doing some sort of DB call, then calling a SOAP service and publishing a cleaned-up version of the result. What makes this hard to test is the fact it's got two solid dependencies - a static call to some sort of DataStore layer and a direct instance of a SoapClient class.

<p>Eventually the way to fix this sort of thing is to inject both of those dependencies separately, but that's too big a refactoring to tackle straight away. When you're modifying a class to get it under test you want to do small, easy-to-understand changes and get it under test ASAP.

<p>One approach to getting it tested is to split the functionality that you think you can test into a separate method, like so:

<p><code><pre>
class MyClass
{
    public function getDataAndPublishRemotely()
    {
        $data = DataStore::getUnpublishedData();
        $cleanData = $this-&gt;processData($data);
        
        $service = new SoapClient($SOME_WSDL);
        $service-&gt;publish($cleanData);
    }
    
    public function processData($data)
    {
        return preg_replace('/[^0-9a0z]+/', '', $data);
    }
}
</pre></code></p>

<p>Testing that functionality becomes pretty simple:

<p><code><pre>
class MyClassTest extends PHPUnit_Framework_Testcase
{
    public function testProcessData()
    {
        $data = ' hel123lo wo00rld    ';
        $class = new MyClass();
        
        $result = $class-&gt;processData();
        
        $this-&gt;assertSame('hello world', $data);
    }
}
</pre></code></p>

<p>However there are a few things wrong with this approach, in my opinion. The first is that the new method has had to be public to be tested, so we've fundamentally changed the API of the class just for testing. The second is that we're not actually running the method we started off trying to test, which is unsatisfying. Thirdly, we're not aware whether the method is accessing the datastore or soap service at all, we're only testing the small bit of functionality we split off.

<p>A better refactoring of the original class is to instead of splitting out the bits easy to test, split out the bits that are hard to test like so:

<p><code><pre>
class MyClass
{
    public function getDataAndPublishRemotely()
    {
        $data = $this-&gt;_getUnpublishedDataFromDatastore();
        $cleanData = preg_replace('/[^0-9a0z]+/', '', $data);
        $this-&gt;_publishDataRemotely($cleanData);
    }
    
    protected function _getUnpublishedDataFromDatastore()
    {
        return DataStore::getUnpublishedData();
    }
    
    protected function _publishDataRemotely($data)
    {
        $service = new SoapClient($SOME_WSDL);
        $service-&gt;publish($data);
    }
}
</pre></code></p>

<p>It's important to note, I suppose, that this is longer than the original class! However, the API of the class hasn't changed, and all of the dependencies have been removed from the method we're interested in. The small additional methods that have been generated can be refactored out later, the point is to do this simple change and get the system under test as soon as possible, then we can do our subsequent refactoring with a safety net in place.

<p>If you have an IDE that can do refactorings like this (Extract Method) for you, then use the features! It's easy to make a mistake in even a little refactoring like this one and you should be very nervous about untested code.

<p>To test the class we need to replace the two protected functions. One way of doing that would be to write a concrete MyTestableClass that extends MyClass and replace those methods and test that instead, but we can achieve effectively the same thing in PHPUnit using Partial Mocks. A partial mock is one that behaves exactly like the original class except when certain specific methods are called.

<p>The test for the class could therefore look something like the following, note that all of the testing is done via expectations on the mock rather than via assertions:

<p><code><pre>
class MyClassTest extends PHPUnit_Framework_Testcase
{

    public function testGetDataAndPublishRemotely()
    {
        $class = $this-&gt;getMock('MyClass', 
            array('_getUnpublishedDataFromDatastore', '_publishDataRemotely'));
        
        $class-&gt;expects($this-&gt;once())
            -&gt;method('_getUnpublishedDataFromDatastore')
            -&gt;will($this-&gt;returnValue(' hel123lo wo00rld    '));
            
        $class-&gt;Expects($this-&gt;once())
            -&gt;method('_publishDataRemotely')
            -&gt;with($this-&gt;equalTo('hello world'));
        
        $class-&gt;getDataAndPublishRemotely();
    }

}
</pre></code></p>

<p>A purist might say that's testing too much in one test and should be decomposed into different tests, but it's concise enough for me. Note we're testing more than the previous example, which only tested the string cleanup. In this test we are testing:

<ul>
<li>The string processing</li>
<li>The fact it requests the data from the DB</li>
<li>The fact it subsequently tries to publish the data</li>
</ul>

<p>This isn't the end of the story, because testing a mock seems a bit wrong, and it would be nice to clear up those dependencies properly. The point is that we've done the simplest thing necessary to get the method into a test harness, and subsequent refactorings can all be done with the test suite in place giving you the developer additional confidence to make changes.]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Top 5 Barclays Cycle Hire tips]]></title>
            <link href="/top-5-barclays-cycle-hire-tips"/>
            <updated>2010-10-19T00:00:00+01:00</updated>
            <id>/top-5-barclays-cycle-hire-tips</id>
            <content type="html"><![CDATA[<p>It's been a couple of months now since the Barclays Cycle Hire scheme (a.k.a. Boris Bikes) launched here in London. I've used it nearly every day since then and picked up a few tricks along the way. Here are my top five tips for making the most of the scheme.</p>

<div class="figure">
<a href="http://www.flickr.com/photos/ciaranmcnulty/5096914181/" title="Hire bikes at Waterloo by CiaranJMcNulty, on Flickr"><img src="http://farm5.static.flickr.com/4132/5096914181_0c6ae6eb8f.jpg" width="500" height="375" alt="Hire bikes at Waterloo" /></a>
</div>

<h5>1. Get a mobile application</h5>

<p>The main problem with the scheme since  it launched has been the lack of bikes at the docks when you need one, and the lack of spaces when you're out and about.</p>

<p>Having a mobile app that lets you find the docking stations in the move makes a huge difference to how you use the scheme. While on my train to work I can decide whether there are bikes at the three docks near Vauxhall, or stay on the train to aim at one of the five docks near Waterloo.</p>

<p>I have an iPhone and really love the <a href="http://cyclehireapp.com/">Cycle Hire App</a>.  It's completely free, not even ad supported, and the author keeps updating it with more and more features.  I particularly appreciate the preset 25-minute timer that let's you know when it's time to find a dock before you get charged!</p>

<p>My Android-using friends assure me there are apps on the marketplace that are just a good.</p>

<h5>2. Bounce the bike to release it</h5>

<p>Stand near the docking stations in the morning and you'll see hoards of people huffing and puffing trying to tug their bikes out of the docks. However, there IS A BETTER WAY.</p>

<p>When you have your green light, lift the back of the bike about 4-5cm and let it drop, the bike will bounce right out of the dock without any effort on your part.</p>

<p>I was one of the tuggers before I saw someone use this method and now I'm a total convert. </p>

<h5>3. Check the bike before you undock</h5>

<p>So far the bikes I've ridden have mostly been in good nick, and I've certainly not seen many broken ones staying unrepaired, but it's worth giving the bike the once-over before taking it out.</p>

<p>If you undock the bike before you notice something wrong, it can take about 5-10 minutes from the time you put it back before you can take another bike out of the system so it's very important to find any faults first. </p>

<p>The main thing to check is the back wheel. If you do nothing else, do this! Lift the back of the bike and give the wheel a quick spin to check it's spinning freely. Quite a few of the bikes seem to have a lot of friction on the back wheel, possibly due to badly adjusted brakes, and will only turn a couple of times before coming to a complete stop. You should make sure that the wheel can keep spinning relatively freely. You seriously notice the difference after a couple of miles!</p>

<p>Check the pedals are ok, a relatively common fault seems to be someone smashing the kickstand into the pedal and leaving it dangling half off so that it falls off for the unsuspecting cyclist halfway down the road. </p>

<p>Lastly, have a quick check of the handlebar grips. If one is starting to work its way off, the best way to get it back on is to smack it hard on the end with an open hand.</p>

<h5>4. Adjust the saddle</h5>

<p>Learn to use the saddle adjust, I've seen people put their bikes back and press the repair light because they couldn't work out how to stop it dropping down. A complete waste of time for them and for the poor repair teams.</p>

<p>The proper height for the saddle is probably a bit higher than what you expect. Most people shouldn't be able to put both feet on the ground at once. The key is that when you're pedalling you want your legs to be extending fully at the bottom of the rotation, otherwise you're only tiring yourself out.</p>

<h5>5. Be safe</h5>

<p>Not so much a tip, but vital advice. Hire bikes are a fantastic way to get from A to B, but please don't hop on one after 20 years of not cycling and try to make your way along main roads.</p>

<p>Getting comfortable cycling in traffic is something that takes time and experience so it's a good idea to stick to side streets if the last time you got on a bike it had spokey-dokeys on the wheels.</p>

<p>My top safety tips for commuters:</p>

<ul>
<li>Look around you. Lots of the new hire cyclists don't seem to ever look over their shoulder to check if there's a big truck coming before they do a spectacularly dangerous turn. Don't be one of them.</li>
<li>Do hand signals in plenty of time. Just jabbing your hand in the vague direction as you do the turn isn't good enough. If you are one of these people who can't actually control the bike without two hands on the wheel, practice a bit first</li>
<li>Match the speed of traffic. This means keep up with the flow, but also means don't zoom ahead. If you're at a relatively stable speed with respect to the traffic flow everyone knows where you are and can keep track of you. </li>
<li>On the other hand don't push yourself too hard when things get tough, a knackered cyclist is less in control.</li>
</ul>



]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Context switching in the 18th Century]]></title>
            <link href="/context-switching-in-the-18th-century"/>
            <updated>2010-07-09T00:00:00+01:00</updated>
            <id>/context-switching-in-the-18th-century</id>
            <content type="html"><![CDATA[<p>Something we've been trying to cut down on at work is the amount of context switching that the development team have to do. Rather than working on multiple projects at once, we've been trying to get them onto one project that they can concentrate on all day.</p>

<p>The reason we do this is we think there's a cognitive cost of changing what you're doing. It's obvious, and it's not a new observation:</p>

<blockquote>
<p>A man commonly saunters a little in turning his hand from one sort of employment to another. When he first begins the new work, he is seldom very keen and hearty; his mind, as they say, does not go to it, and for some time he rather trifles than applies to good purpose. The habit of sauntering, and of indolent careless application, which is naturally, or rather necessarily, acquired by every country workman who is obliged to change his work and his tools every half hour, and to apply his hand in twenty different ways almost every day of his life, renders him almost always slothful and lazy, and incapable of any vigorous application, even on the most pressing occasions. Independent, therefore, of his deficiency in point of dexterity, this cause alone must always reduce considerably the quantity of work which he is capable of performing.</p>
<p><cite>Adam Smith - The Wealth of Nations (1776)</cite></p>
</blockquote>

<p>It amazes me when people say "Can't you just work on both things at once?" but it's very common in some workplaces. I guess some things take a few centuries to sink in.</p>]]></content>
        </entry>
    </feed>